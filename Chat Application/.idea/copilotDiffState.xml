<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/realtime-chat/src/main/resources/static/chat.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/realtime-chat/src/main/resources/static/chat.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;tr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Sohbet&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;h2&gt; Gerçek Zamanlı Sohbet&lt;/h2&gt;&#10;&#10;&lt;p id=&quot;greeting&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;div style=&quot;display: flex; gap: 50px;&quot;&gt;&#10;  &lt;div&gt;&#10;    &lt;h4&gt; Kişi Listesi&lt;/h4&gt;&#10;    &lt;ul id=&quot;user-list&quot;&gt;&lt;/ul&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;    &lt;h4&gt; Sohbet Geçmişi&lt;/h4&gt;&#10;    &lt;ul id=&quot;conversation-list&quot;&gt;&lt;/ul&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;hr&gt;&#10;&#10;&lt;label&gt;Alıcı: &lt;input type=&quot;text&quot; id=&quot;receiver&quot; /&gt;&lt;/label&gt;&lt;br/&gt;&#10;&lt;label&gt;Mesaj: &lt;input type=&quot;text&quot; id=&quot;message&quot; /&gt;&lt;/label&gt;&lt;br/&gt;&#10;&lt;button onclick=&quot;sendMessage()&quot;&gt;Gönder&lt;/button&gt;&#10;&#10;&lt;hr&gt;&#10;&lt;div id=&quot;chat-box&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/stompjs@2.3.3/lib/stomp.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;&lt;script&gt;&#10;    let stompClient = null;&#10;    let currentUser = &quot;&quot;;&#10;&#10;    // URL'den kullanıcı adını al&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    currentUser = urlParams.get(&quot;user&quot;);&#10;&#10;    if (!currentUser) {&#10;      alert(&quot;Kullanıcı adı bulunamadı. Lütfen giriş yapın.&quot;);&#10;      window.location.href = &quot;/login.html&quot;;&#10;    }&#10;&#10;    document.getElementById(&quot;greeting&quot;).innerText = `${currentUser} olarak giriş yaptınız.`;&#10;&#10;    function connectWebSocket() {&#10;      const socket = new SockJS(&quot;/chat&quot;);&#10;      stompClient = Stomp.over(socket);&#10;&#10;      stompClient.connect({}, function () {&#10;        // Girişte önceki okunmamış mesajları da okundu olarak işaretle&#10;        fetch(`/messages/mark-all-read/${currentUser}`, { method: &quot;PUT&quot; });&#10;&#10;        stompClient.subscribe(&quot;/topic/messages/&quot; + currentUser, function (message) {&#10;          const msg = JSON.parse(message.body);&#10;          const display = `${msg.sender}: ${msg.content} (${msg.status})`;&#10;          const chatBox = document.getElementById(&quot;chat-box&quot;);&#10;&#10;          // Eğer aynı mesaj daha önce eklendiyse tekrar gösterme&#10;          if (!document.getElementById(&quot;msg-&quot; + msg.id)) {&#10;            const p = document.createElement(&quot;p&quot;);&#10;            p.id = &quot;msg-&quot; + msg.id;&#10;            p.innerText = display;&#10;            chatBox.appendChild(p);&#10;          } else {&#10;            // Mevcutsa sadece status'ü güncelle&#10;            const existing = document.getElementById(&quot;msg-&quot; + msg.id);&#10;            existing.innerText = display;&#10;          }&#10;&#10;          // Eğer bu mesajın alıcısı bu kullanıcıysa ve henüz READ değilse → READ yap&#10;          if (msg.receiver === currentUser &amp;&amp; msg.status !== &quot;READ&quot;) {&#10;            fetch(`/messages/${msg.id}/read`, { method: &quot;PUT&quot; });&#10;          }&#10;        });&#10;&#10;        // Kullanıcı listelerini yükle&#10;        loadUserLists();&#10;      });&#10;    }&#10;&#10;    function loadUserLists() {&#10;      // Kişi listesi&#10;      fetch(`/users/all/${currentUser}`)&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; {&#10;          const userList = document.getElementById(&quot;user-list&quot;);&#10;          userList.innerHTML = &quot;&quot;;&#10;          data.forEach(user =&gt; {&#10;            const li = document.createElement(&quot;li&quot;);&#10;            li.innerText = user;&#10;            li.style.cursor = &quot;pointer&quot;;&#10;            li.onclick = () =&gt; {&#10;              document.getElementById(&quot;receiver&quot;).value = user;&#10;              loadChatHistory(user);&#10;            };&#10;            userList.appendChild(li);&#10;          });&#10;        });&#10;&#10;      // Sohbet geçmişi&#10;      fetch(`/users/conversations/${currentUser}`)&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; {&#10;          const convList = document.getElementById(&quot;conversation-list&quot;);&#10;          convList.innerHTML = &quot;&quot;;&#10;          data.forEach(user =&gt; {&#10;            const li = document.createElement(&quot;li&quot;);&#10;            li.innerText = user;&#10;            li.style.cursor = &quot;pointer&quot;;&#10;            li.onclick = () =&gt; {&#10;              document.getElementById(&quot;receiver&quot;).value = user;&#10;              loadChatHistory(user);&#10;            };&#10;            convList.appendChild(li);&#10;          });&#10;        });&#10;    }&#10;&#10;    function loadChatHistory(receiver) {&#10;        // Önce okunmamış mesajları READ olarak işaretle&#10;        fetch(`/messages/mark-read/${currentUser}/${receiver}`, { method: &quot;PUT&quot; });&#10;&#10;        document.getElementById(&quot;chat-box&quot;).innerHTML = &quot;&quot;;&#10;&#10;        fetch(`/messages/${currentUser}/${receiver}`)&#10;            .then(res =&gt; res.json())&#10;            .then(data =&gt; {&#10;                data.forEach(msg =&gt; {&#10;                    const display = `${msg.sender}: ${msg.content} (${msg.status})`;&#10;                    const chatBox = document.getElementById(&quot;chat-box&quot;);&#10;&#10;                    if (!document.getElementById(&quot;msg-&quot; + msg.id)) {&#10;                        const p = document.createElement(&quot;p&quot;);&#10;                        p.id = &quot;msg-&quot; + msg.id;&#10;                        p.innerText = display;&#10;                        chatBox.appendChild(p);&#10;                    } else {&#10;                        document.getElementById(&quot;msg-&quot; + msg.id).innerText = display;&#10;                    }&#10;                });&#10;            });&#10;    }&#10;&#10;&#10;    function sendMessage() {&#10;      if (!currentUser) {&#10;        alert(&quot;Giriş yapmadan mesaj gönderemezsiniz.&quot;);&#10;        return;&#10;      }&#10;&#10;      const receiver = document.getElementById(&quot;receiver&quot;).value;&#10;      const content = document.getElementById(&quot;message&quot;).value;&#10;&#10;      if (!receiver || !content) {&#10;        alert(&quot;Alıcı ve mesaj boş olamaz.&quot;);&#10;        return;&#10;      }&#10;&#10;      stompClient.send(&quot;/app/chat&quot;, {}, JSON.stringify({&#10;        sender: currentUser,&#10;        receiver: receiver,&#10;        content: content&#10;      }));&#10;&#10;      // Mesaj kutusunu temizle&#10;      document.getElementById(&quot;message&quot;).value = &quot;&quot;;&#10;    }&#10;&#10;    connectWebSocket(); // Sayfa yüklenince otomatik bağlan&#10;&lt;/script&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;tr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Sohbet&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;h2&gt; Gerçek Zamanlı Sohbet&lt;/h2&gt;&#10;&#10;&lt;p id=&quot;greeting&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;div style=&quot;display: flex; gap: 50px;&quot;&gt;&#10;  &lt;div&gt;&#10;    &lt;h4&gt; Kişi Listesi&lt;/h4&gt;&#10;    &lt;ul id=&quot;user-list&quot;&gt;&lt;/ul&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;    &lt;h4&gt; Sohbet Geçmişi&lt;/h4&gt;&#10;    &lt;ul id=&quot;conversation-list&quot;&gt;&lt;/ul&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;hr&gt;&#10;&#10;&lt;label&gt;Alıcı: &lt;input type=&quot;text&quot; id=&quot;receiver&quot; /&gt;&lt;/label&gt;&lt;br/&gt;&#10;&lt;label&gt;Mesaj: &lt;input type=&quot;text&quot; id=&quot;message&quot; /&gt;&lt;/label&gt;&lt;br/&gt;&#10;&lt;button onclick=&quot;sendMessage()&quot;&gt;Gönder&lt;/button&gt;&#10;&#10;&lt;hr&gt;&#10;&lt;div id=&quot;chat-box&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/stompjs@2.3.3/lib/stomp.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;&lt;script&gt;&#10;    let stompClient = null;&#10;    let currentUser = &quot;&quot;;&#10;&#10;    // URL'den kullanıcı adını al&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    currentUser = urlParams.get(&quot;user&quot;);&#10;&#10;    if (!currentUser) {&#10;      alert(&quot;Kullanıcı adı bulunamadı. Lütfen giriş yapın.&quot;);&#10;      window.location.href = &quot;/login.html&quot;;&#10;    }&#10;&#10;    document.getElementById(&quot;greeting&quot;).innerText = `${currentUser} olarak giriş yaptınız.`;&#10;&#10;    function connectWebSocket() {&#10;      const socket = new SockJS(&quot;/chat&quot;);&#10;      stompClient = Stomp.over(socket);&#10;&#10;      stompClient.connect({}, function () {&#10;        // Girişte önceki okunmamış mesajları da okundu olarak işaretle&#10;        fetch(`/messages/mark-all-read/${currentUser}`, { method: &quot;PUT&quot; });&#10;&#10;        stompClient.subscribe(&quot;/topic/messages/&quot; + currentUser, function (message) {&#10;          const msg = JSON.parse(message.body);&#10;          const display = `${msg.sender}: ${msg.content} (${msg.status})`;&#10;          const chatBox = document.getElementById(&quot;chat-box&quot;);&#10;&#10;          // Eğer aynı mesaj daha önce eklendiyse tekrar gösterme&#10;          if (!document.getElementById(&quot;msg-&quot; + msg.id)) {&#10;            const p = document.createElement(&quot;p&quot;);&#10;            p.id = &quot;msg-&quot; + msg.id;&#10;            p.innerText = display;&#10;            chatBox.appendChild(p);&#10;          } else {&#10;            // Mevcutsa sadece status'ü güncelle&#10;            const existing = document.getElementById(&quot;msg-&quot; + msg.id);&#10;            existing.innerText = display;&#10;          }&#10;&#10;          // Eğer bu mesajın alıcısı bu kullanıcıysa ve henüz READ değilse → READ yap&#10;          if (msg.receiver === currentUser &amp;&amp; msg.status !== &quot;READ&quot;) {&#10;            fetch(`/messages/${msg.id}/read`, { method: &quot;PUT&quot; });&#10;          }&#10;        });&#10;&#10;        // Kullanıcı listelerini yükle&#10;        loadUserLists();&#10;      });&#10;    }&#10;&#10;    function loadUserLists() {&#10;      // Kişi listesi&#10;      fetch(`/users/all/${currentUser}`)&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; {&#10;          const userList = document.getElementById(&quot;user-list&quot;);&#10;          userList.innerHTML = &quot;&quot;;&#10;          data.forEach(user =&gt; {&#10;            const li = document.createElement(&quot;li&quot;);&#10;            li.innerText = user;&#10;            li.style.cursor = &quot;pointer&quot;;&#10;            li.onclick = () =&gt; {&#10;              document.getElementById(&quot;receiver&quot;).value = user;&#10;              loadChatHistory(user);&#10;            };&#10;            userList.appendChild(li);&#10;          });&#10;        });&#10;&#10;      // Sohbet geçmişi&#10;      fetch(`/users/conversations/${currentUser}`)&#10;        .then(res =&gt; res.json())&#10;        .then(data =&gt; {&#10;          const convList = document.getElementById(&quot;conversation-list&quot;);&#10;          convList.innerHTML = &quot;&quot;;&#10;          data.forEach(user =&gt; {&#10;            const li = document.createElement(&quot;li&quot;);&#10;            li.innerText = user;&#10;            li.style.cursor = &quot;pointer&quot;;&#10;            li.onclick = () =&gt; {&#10;              document.getElementById(&quot;receiver&quot;).value = user;&#10;              loadChatHistory(user);&#10;            };&#10;            convList.appendChild(li);&#10;          });&#10;        });&#10;    }&#10;&#10;    function loadChatHistory(receiver) {&#10;        // Önce okunmamış mesajları READ olarak işaretle&#10;        fetch(`/messages/mark-read/${currentUser}/${receiver}`, { method: &quot;PUT&quot; });&#10;&#10;        document.getElementById(&quot;chat-box&quot;).innerHTML = &quot;&quot;;&#10;&#10;        fetch(`/messages/${currentUser}/${receiver}`)&#10;            .then(res =&gt; res.json())&#10;            .then(data =&gt; {&#10;                data.forEach(msg =&gt; {&#10;                    const display = `${msg.sender}: ${msg.content} (${msg.status})`;&#10;                    const chatBox = document.getElementById(&quot;chat-box&quot;);&#10;&#10;                    if (!document.getElementById(&quot;msg-&quot; + msg.id)) {&#10;                        const p = document.createElement(&quot;p&quot;);&#10;                        p.id = &quot;msg-&quot; + msg.id;&#10;                        p.innerText = display;&#10;                        chatBox.appendChild(p);&#10;                    } else {&#10;                        document.getElementById(&quot;msg-&quot; + msg.id).innerText = display;&#10;                    }&#10;                });&#10;            });&#10;    }&#10;&#10;&#10;    function sendMessage() {&#10;      if (!currentUser) {&#10;        alert(&quot;Giriş yapmadan mesaj gönderemezsiniz.&quot;);&#10;        return;&#10;      }&#10;&#10;      const receiver = document.getElementById(&quot;receiver&quot;).value;&#10;      const content = document.getElementById(&quot;message&quot;).value;&#10;&#10;      if (!receiver || !content) {&#10;        alert(&quot;Alıcı ve mesaj boş olamaz.&quot;);&#10;        return;&#10;      }&#10;&#10;      stompClient.send(&quot;/app/chat&quot;, {}, JSON.stringify({&#10;        sender: currentUser,&#10;        receiver: receiver,&#10;        content: content&#10;      }));&#10;&#10;      // Mesaj kutusunu temizle&#10;      document.getElementById(&quot;message&quot;).value = &quot;&quot;;&#10;    }&#10;&#10;    connectWebSocket(); // Sayfa yüklenince otomatik bağlan&#10;&lt;/script&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/realtime-chat/src/main/resources/static/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/realtime-chat/src/main/resources/static/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=/login.html&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;p&gt;Yönlendiriliyor...&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=/login.html&quot; /&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;p&gt;Yönlendiriliyor...&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/realtime-chat/src/main/resources/static/login.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/realtime-chat/src/main/resources/static/login.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;tr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Giriş Yap&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h2&gt; Giriş Yap&lt;/h2&gt;&#10;&#10;&lt;form onsubmit=&quot;login(); return false;&quot;&gt;&#10;    &lt;label&gt;Kullanıcı Adı: &lt;input type=&quot;text&quot; id=&quot;username&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;label&gt;Şifre: &lt;input type=&quot;password&quot; id=&quot;password&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;button type=&quot;submit&quot;&gt;Giriş Yap&lt;/button&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;p&gt;Hesabınız yok mu?&lt;/p&gt;&#10;&lt;button onclick=&quot;window.location.href='/register.html'&quot;&gt; Kayıt Ol&lt;/button&gt;&#10;&#10;&lt;script&gt;&#10;    function login() {&#10;      const username = document.getElementById(&quot;username&quot;).value.trim();&#10;      const password = document.getElementById(&quot;password&quot;).value.trim();&#10;&#10;      fetch(&quot;/auth/login&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ username, password })&#10;      })&#10;      .then(res =&gt; res.text())&#10;      .then(response =&gt; {&#10;        if (response === &quot;Giriş başarılı&quot;) {&#10;          alert(&quot;✅ Giriş başarılı!&quot;);&#10;          window.location.href = &quot;/chat.html?user=&quot; + encodeURIComponent(username);&#10;        } else {&#10;          alert(&quot;❌ Hatalı giriş: &quot; + response);&#10;        }&#10;      });&#10;    }&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;tr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Giriş Yap&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h2&gt; Giriş Yap&lt;/h2&gt;&#10;&#10;&lt;form onsubmit=&quot;login(); return false;&quot;&gt;&#10;    &lt;label&gt;Kullanıcı Adı: &lt;input type=&quot;text&quot; id=&quot;username&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;label&gt;Şifre: &lt;input type=&quot;password&quot; id=&quot;password&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;button type=&quot;submit&quot;&gt;Giriş Yap&lt;/button&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;p&gt;Hesabınız yok mu?&lt;/p&gt;&#10;&lt;button onclick=&quot;window.location.href='/register.html'&quot;&gt; Kayıt Ol&lt;/button&gt;&#10;&#10;&lt;script&gt;&#10;    function login() {&#10;      const username = document.getElementById(&quot;username&quot;).value.trim();&#10;      const password = document.getElementById(&quot;password&quot;).value.trim();&#10;&#10;      fetch(&quot;/auth/login&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ username, password })&#10;      })&#10;      .then(res =&gt; res.text())&#10;      .then(response =&gt; {&#10;        if (response === &quot;Giriş başarılı&quot;) {&#10;          alert(&quot;✅ Giriş başarılı!&quot;);&#10;          window.location.href = &quot;/chat.html?user=&quot; + encodeURIComponent(username);&#10;        } else {&#10;          alert(&quot;❌ Hatalı giriş: &quot; + response);&#10;        }&#10;      });&#10;    }&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/realtime-chat/src/main/resources/static/register.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/realtime-chat/src/main/resources/static/register.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;tr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Kayıt Ol&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h2&gt; Kayıt Ol&lt;/h2&gt;&#10;&#10;&lt;form onsubmit=&quot;register(); return false;&quot;&gt;&#10;    &lt;label&gt;Kullanıcı Adı: &lt;input type=&quot;text&quot; id=&quot;username&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;label&gt;Şifre: &lt;input type=&quot;password&quot; id=&quot;password&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;button type=&quot;submit&quot;&gt;Kayıt Ol&lt;/button&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;script&gt;&#10;    function register() {&#10;      const username = document.getElementById(&quot;username&quot;).value.trim();&#10;      const password = document.getElementById(&quot;password&quot;).value.trim();&#10;&#10;      if (!username || !password) {&#10;        alert(&quot;Tüm alanlar doldurulmalı!&quot;);&#10;        return;&#10;      }&#10;&#10;      fetch(&quot;/auth/register&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ username, password })&#10;      })&#10;      .then(res =&gt; res.json())&#10;      .then(data =&gt; {&#10;        alert(&quot;✅ Kayıt başarılı! Giriş ekranına yönlendiriliyorsun...&quot;);&#10;        window.location.href = &quot;/login.html&quot;;&#10;      })&#10;      .catch(err =&gt; alert(&quot;❌ Hata: &quot; + err));&#10;    }&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;tr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Kayıt Ol&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h2&gt; Kayıt Ol&lt;/h2&gt;&#10;&#10;&lt;form onsubmit=&quot;register(); return false;&quot;&gt;&#10;    &lt;label&gt;Kullanıcı Adı: &lt;input type=&quot;text&quot; id=&quot;username&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;label&gt;Şifre: &lt;input type=&quot;password&quot; id=&quot;password&quot; required /&gt;&lt;/label&gt;&lt;br/&gt;&#10;    &lt;button type=&quot;submit&quot;&gt;Kayıt Ol&lt;/button&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;script&gt;&#10;    function register() {&#10;      const username = document.getElementById(&quot;username&quot;).value.trim();&#10;      const password = document.getElementById(&quot;password&quot;).value.trim();&#10;&#10;      if (!username || !password) {&#10;        alert(&quot;Tüm alanlar doldurulmalı!&quot;);&#10;        return;&#10;      }&#10;&#10;      fetch(&quot;/auth/register&quot;, {&#10;        method: &quot;POST&quot;,&#10;        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;        body: JSON.stringify({ username, password })&#10;      })&#10;      .then(res =&gt; res.json())&#10;      .then(data =&gt; {&#10;        alert(&quot;✅ Kayıt başarılı! Giriş ekranına yönlendiriliyorsun...&quot;);&#10;        window.location.href = &quot;/login.html&quot;;&#10;      })&#10;      .catch(err =&gt; alert(&quot;❌ Hata: &quot; + err));&#10;    }&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>